<?xml version="1.0" encoding="UTF-8"?>
<model version="3.0.1">
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Buttons" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt1" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <operation name="Buttons" type="QActive(Q_STATE_CAST(&amp;Buttons::initial)), m_timeEvt1(TIMEOUT_SIG)" visibility="0x00" properties="0x02">
    <documentation>constructor</documentation>
   </operation>
   <statechart>
    <initial target="../2">
     <initial_glyph conn="11,15,4,3,24,17">
      <action box="0,-2,16,2"/>
     </initial_glyph>
    </initial>
    <state name="Pressed">
     <entry brief="Publish Signal">Serial.println(&quot;The Button has been pressed&quot;);
me-&gt;m_timeEvt1.postEvery(me, 30);</entry>
     <exit>me-&gt;m_timeEvt1.disarm();</exit>
     <tran trig="TIMEOUT">
      <choice>
       <guard brief="Button Pressed">digitalRead(PUSHBUTTON_PIN)==LOW</guard>
       <choice_glyph conn="38,25,5,-1,8">
        <action box="2,-3,14,2"/>
       </choice_glyph>
      </choice>
      <choice target="../../../2">
       <guard>else</guard>
       <action>QF::publish(Q_NEW(QEvt, PUSHBUTTON_SIG));
</action>
       <choice_glyph conn="38,25,4,0,11">
        <action box="1,3,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="28,22,3,-1,10,3">
       <action box="0,-2,14,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,15,22,17">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state name="Not_Pressed">
     <entry>me-&gt;m_timeEvt1.postEvery(me, 30);</entry>
     <exit>me-&gt;m_timeEvt1.disarm();</exit>
     <tran trig="TIMEOUT">
      <choice target="../../../1">
       <guard brief="Button Pressed">digitalRead(PUSHBUTTON_PIN)==LOW</guard>
       <action>QF::publish(Q_NEW(QEvt, PUSHBUTTON_SIG));
</action>
       <choice_glyph conn="37,47,5,1,19,-17,-6">
        <action box="3,-3,15,2"/>
       </choice_glyph>
      </choice>
      <choice>
       <guard>else</guard>
       <choice_glyph conn="37,47,4,-1,3">
        <action box="1,2,6,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="28,44,3,-1,9,3">
       <action box="1,-2,12,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="28,36,22,16">
      <entry box="1,2,5,2"/>
      <exit box="1,4,5,2"/>
     </state_glyph>
    </state>
    <state_diagram size="87,65"/>
   </statechart>
  </class>
  <class name="ControlLED" superclass="qpcpp::QActive">
   <operation name="ControlLED" type="QActive(Q_STATE_CAST(&amp;ControlLED::initial))" visibility="0x00" properties="0x02">
    <code>// empty</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;subscribe(PUSHBUTTON_SIG);</action>
     <initial_glyph conn="5,4,5,3,8,6,8">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="ledOff">
     <entry brief="Turns LED Off">digitalWrite(LED_PIN, LOW);</entry>
     <tran trig="PUSHBUTTON" target="../../2">
      <tran_glyph conn="21,22,3,3,-8,24,8">
       <action box="-9,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="21,8,34,26">
      <entry box="1,2,17,2"/>
     </state_glyph>
    </state>
    <state name="ledOn">
     <entry brief="Turns LED On">digitalWrite(LED_PIN,HIGH);</entry>
     <tran trig="PUSHBUTTON" target="../../1">
      <tran_glyph conn="55,54,1,1,11,-28,-11">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="21,39,34,23">
      <entry box="1,2,16,3"/>
     </state_glyph>
    </state>
    <state_diagram size="74,69"/>
   </statechart>
  </class>
  <attribute name="AO_Buttons" type="QActive * const" visibility="0x00" properties="0x00"/>
  <attribute name="AO_ControlLED" type="QActive * const" visibility="0x00" properties="0x00"/>
 </package>
 <directory name=".">
  <file name="arduinoBSP.ino">
   <text>// Setup
// Include the following libraries

#include &quot;qp_port.h&quot;
#include &quot;Arduino.h&quot;
#include &lt;avr/interrupt.h&gt;
#include &lt;avr/power.h&gt;
#include &lt;avr/sleep.h&gt;
#include &lt;avr/io.h&gt;

// Set the namespace QP

Q_DEFINE_THIS_FILE

using namespace QP;

// Defines

#define BSP_TICKS_PER_SEC 10
#define POLLING_TICKS_PER_SEC 1
#define CLEARING_TICKS_PER_SEC 15
#define DELAY_TICKS_PER_SEC 10

// Enumerate pins and signals

enum PINS {
    PUSHBUTTON_PIN=8,
    LED_PIN=4,
};

enum ButtonSignals {
    TIMEOUT_SIG=Q_USER_SIG,
    PUSHBUTTON_SIG,
    MAX_PUB_SIG,
    MAX_SIG
};

bool buttonRead=LOW;

// Local-scope objects -------------------------------------------------------
static QEvt const *l_ButtonsQueueSto[100];
static QEvt const *l_ControlLEDQueueSto[100];
static QSubscrList l_subscrSto[MAX_SIG];
static QF_MPOOL_EL(QEvt) l_smlPoolSto[700]; // storage for the small event pool



// BSP Initialization Function................................................
void BSP_init(void) {
    //DDRB  = 0xFF; // All PORTB pins are outputs (user LED)
    //PORTB = 0x00; // drive all pins low


    //Declare Pins here
    pinMode(PUSHBUTTON_PIN, INPUT); //Initiates push button pin

    pinMode(LED_PIN, OUTPUT); //Initiates LED Pin as output
    Serial.begin(115200);
}
//............................................................................
void BSP_ledOff(void) {
    digitalWrite(LED_PIN, LOW);
}

void BSP_ledOn(void) {
    digitalWrite(LED_PIN, HIGH);
}

//............................................................................
ISR(TIMER2_COMPA_vect) {
    QF::TICK((void *)0); // process all armed time events
}
//............................................................................
void QF::onStartup(void) {
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking

    // Use the I/O clock for timer.
    // Note: Changing this value can corrupt TCNT2, OCR2A, OCR2B,
    //       TCCR2A, TCCR2B.  As a result, this should be set before any of
    //       those
    ASSR  &amp;= ~(1 &lt;&lt; AS2);

    // Set to CTC mode.
    // Note that WG22 must also be set to 0.
    TCCR2A = (1 &lt;&lt; WGM21) | (0 &lt;&lt; WGM20);

    // Set the prescalar to 1/2^10
    TCCR2B = (1 &lt;&lt; CS22 ) | (1 &lt;&lt; CS21) | (1 &lt;&lt; CS20);

    // Set to use TIMER2 Compare interrupt 'A'
    TIMSK2 = (1 &lt;&lt; OCIE2A);

    // Initialize timer value to 0.
    TCNT2  = 0;

    // Initialize Compare value
    // F_CPU comes from Makefile, default is 16000000
    // BSP_TICKS_PER_SEC is set at the top of this file
    OCR2A  = (F_CPU / BSP_TICKS_PER_SEC / 1024) - 1;

}
//............................................................................
void QF::onCleanup(void) {
}
//............................................................................
void QF::onIdle() {
    QF_INT_ENABLE(); // re-enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
    QF_INT_DISABLE(); // disable all interrupts
    BSP_ledOff(); // User LED permanently ON
    asm volatile (&quot;jmp 0x0000&quot;); // perform a software reset of the Arduino
}

//============================================================================
// generate code for the Buttons application...
$declare(AOs::ControlLED)

$define(AOs::ControlLED)

$declare(AOs::Buttons)

$define(AOs::Buttons)

//............................................................................
static Buttons l_buttons;             // instantiate the Buttons AO
QActive *AO_Buttons = &amp;l_buttons;     // initialize the global pointer to Buttons
static ControlLED l_controlled;                     // instantiate the Buttons AO
QActive *AO_ControlLED = &amp;l_controlled;             // initialize the global pointer to Buttons


//............................................................................
void setup() {
    BSP_init(); // initialize the BSP
    QF::init(); // initialize the framework and the underlying RT kernel

                                                  // initialize event pools...
    QF::poolInit(l_smlPoolSto, sizeof(l_smlPoolSto), sizeof(l_smlPoolSto[0]));

    QF::psInit(l_subscrSto, Q_DIM(l_subscrSto));     // init publish-subscribe

    AO_Buttons-&gt;start(1, l_ButtonsQueueSto, Q_DIM(l_ButtonsQueueSto),
                     (void *)0, 0U);        // start the Buttons active object

    AO_ControlLED-&gt;start(2, l_ControlLEDQueueSto, Q_DIM(l_ControlLEDQueueSto),
                     (void *)0, 0U);        // start the Buttons active object

    BSP_ledOff();
}

//////////////////////////////////////////////////////////////////////////////
// NOTE: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino

</text>
  </file>
 </directory>
</model>
